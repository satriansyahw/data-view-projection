









//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace ViewProjectionSample.DomainModels.Controllers
{
    using Intersoft.Data.WebApi;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Net.Http;
    using System.Web.Http;
    using System.Web.Http.OData.Query;
    using ViewProjectionSample.DomainModels;
    
    [EntityController]
    public partial class AdventureWorksController : ApiController
    {
        private EntityContextProvider<AdventureWorksEntities> db = new EntityContextProvider<AdventureWorksEntities>();
        
        [HttpGet]
		public QueryResult Addresses(ODataQueryOptions<Address> options)
		{
			return this.ToQueryResult<Address>(db.Context.Addresses, options);
		}

        [HttpGet]
		public QueryResult Customers(ODataQueryOptions<Customer> options)
		{
			return this.ToQueryResult<Customer>(db.Context.Customers, options);
		}

        [HttpGet]
		public QueryResult CustomerAddresses(ODataQueryOptions<CustomerAddress> options)
		{
			return this.ToQueryResult<CustomerAddress>(db.Context.CustomerAddresses, options);
		}

        [HttpGet]
		public QueryResult Products(ODataQueryOptions<Product> options)
		{
			return this.ToQueryResult<Product>(db.Context.Products, options);
		}

        [HttpGet]
		public QueryResult ProductCategories(ODataQueryOptions<ProductCategory> options)
		{
			return this.ToQueryResult<ProductCategory>(db.Context.ProductCategories, options);
		}

        [HttpGet]
		public QueryResult ProductDescriptions(ODataQueryOptions<ProductDescription> options)
		{
			return this.ToQueryResult<ProductDescription>(db.Context.ProductDescriptions, options);
		}

        [HttpGet]
		public QueryResult ProductModels(ODataQueryOptions<ProductModel> options)
		{
			return this.ToQueryResult<ProductModel>(db.Context.ProductModels, options);
		}

        [HttpGet]
		public QueryResult ProductModelProductDescriptions(ODataQueryOptions<ProductModelProductDescription> options)
		{
			return this.ToQueryResult<ProductModelProductDescription>(db.Context.ProductModelProductDescriptions, options);
		}

        [HttpGet]
		public QueryResult SalesOrderDetails(ODataQueryOptions<SalesOrderDetail> options)
		{
			return this.ToQueryResult<SalesOrderDetail>(db.Context.SalesOrderDetails, options);
		}

        [HttpGet]
		public QueryResult SalesOrderHeaders(ODataQueryOptions<SalesOrderHeader> options)
		{
			return this.ToQueryResult<SalesOrderHeader>(db.Context.SalesOrderHeaders, options);
		}

        [HttpPost]
        public SaveResult SaveChanges(JObject saveBundle)
        {
            return db.SaveChanges(saveBundle);
        }
    }
}


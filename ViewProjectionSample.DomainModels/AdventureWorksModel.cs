









//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Intersoft.Crosslight;
using Intersoft.Crosslight.Data;
using Intersoft.Crosslight.Data.ComponentModel;
using Intersoft.Crosslight.Data.EntityModel;
using System.ComponentModel;

namespace ViewProjectionSample.DomainModels
{
    public partial class AdventureWorksEntities
    {
        public static Type[] Types = new Type[] { typeof(Address), typeof(Customer), typeof(CustomerAddress), typeof(Product), typeof(ProductCategory), typeof(ProductDescription), typeof(ProductModel), typeof(ProductModelProductDescription), typeof(SalesOrderDetail), typeof(SalesOrderHeader) };
    }
    
    public partial class Address : EntityBase
    {
        #region Constructors

        public Address()
        {
        }
    
        protected override void Initialize()
        {
            base.Initialize();
            
            this.CustomerAddresses = new RelatedList<CustomerAddress>(this, CustomerAddressesPropertyMetadata);
            this.SalesOrderHeaders = new RelatedList<SalesOrderHeader>(this, SalesOrderHeadersPropertyMetadata);
            this.SalesOrderHeaders1 = new RelatedList<SalesOrderHeader>(this, SalesOrderHeaders1PropertyMetadata);
        }
        static Address()
        {
            _Initialize();
        }
    
        internal static void _Initialize()
        {
            EntityRelations.Initialize();
        }

        #endregion
    
        #region Property Definitions

        public static EntityProperty AddressIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Address, int>("AddressID", false, true, true));

        public static EntityProperty AddressLine1PropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Address, string>("AddressLine1", false, false, false));

        public static EntityProperty AddressLine2PropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Address, string>("AddressLine2", true, false, false));

        public static EntityProperty CityPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Address, string>("City", false, false, false));

        public static EntityProperty StateProvincePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Address, string>("StateProvince", false, false, false));

        public static EntityProperty CountryRegionPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Address, string>("CountryRegion", false, false, false));

        public static EntityProperty PostalCodePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Address, string>("PostalCode", false, false, false));

        public static EntityProperty rowguidPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Address, System.Guid>("rowguid", false, false, false));

        public static EntityProperty ModifiedDatePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Address, System.DateTime>("ModifiedDate", false, false, false));

        public static EntityProperty CustomerAddressesPropertyMetadata = 
            EntityMetadata.Register(new NavigationListEntityProperty<Address, RelatedList<CustomerAddress>>("CustomerAddresses", false, "", QueryDirection.Children));

        public static EntityProperty SalesOrderHeadersPropertyMetadata = 
            EntityMetadata.Register(new NavigationListEntityProperty<Address, RelatedList<SalesOrderHeader>>("SalesOrderHeaders", false, "", QueryDirection.Children));

        public static EntityProperty SalesOrderHeaders1PropertyMetadata = 
            EntityMetadata.Register(new NavigationListEntityProperty<Address, RelatedList<SalesOrderHeader>>("SalesOrderHeaders1", false, "", QueryDirection.Children));


        #endregion
    
        #region Properties

        [PrimaryKey]
	    [AutoIncrement]
	    public int AddressID 
	    { 
		    get { return (int)this.GetValue(AddressIDPropertyMetadata); } 
		    set { this.SetValue(AddressIDPropertyMetadata, value); } 
	    }

        [MaxLength(60)]
	    public string AddressLine1 
	    { 
		    get { return (string)this.GetValue(AddressLine1PropertyMetadata); } 
		    set { this.SetValue(AddressLine1PropertyMetadata, value); } 
	    }

        [MaxLength(60)]
	    public string AddressLine2 
	    { 
		    get { return (string)this.GetValue(AddressLine2PropertyMetadata); } 
		    set { this.SetValue(AddressLine2PropertyMetadata, value); } 
	    }

        [MaxLength(30)]
	    public string City 
	    { 
		    get { return (string)this.GetValue(CityPropertyMetadata); } 
		    set { this.SetValue(CityPropertyMetadata, value); } 
	    }

        [MaxLength(50)]
	    public string StateProvince 
	    { 
		    get { return (string)this.GetValue(StateProvincePropertyMetadata); } 
		    set { this.SetValue(StateProvincePropertyMetadata, value); } 
	    }

        [MaxLength(50)]
	    public string CountryRegion 
	    { 
		    get { return (string)this.GetValue(CountryRegionPropertyMetadata); } 
		    set { this.SetValue(CountryRegionPropertyMetadata, value); } 
	    }

        [MaxLength(15)]
	    public string PostalCode 
	    { 
		    get { return (string)this.GetValue(PostalCodePropertyMetadata); } 
		    set { this.SetValue(PostalCodePropertyMetadata, value); } 
	    }

        public System.Guid rowguid 
	    { 
		    get { return (System.Guid)this.GetValue(rowguidPropertyMetadata); } 
		    set { this.SetValue(rowguidPropertyMetadata, value); } 
	    }

        public System.DateTime ModifiedDate 
	    { 
		    get { return (System.DateTime)this.GetValue(ModifiedDatePropertyMetadata); } 
		    set { this.SetValue(ModifiedDatePropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.List)]
	    public RelatedList<CustomerAddress> CustomerAddresses 
	    { 
	    	get { return (RelatedList<CustomerAddress>)this.GetValue(CustomerAddressesPropertyMetadata); } 
	    	set { this.SetValue(CustomerAddressesPropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.List)]
	    public RelatedList<SalesOrderHeader> SalesOrderHeaders 
	    { 
	    	get { return (RelatedList<SalesOrderHeader>)this.GetValue(SalesOrderHeadersPropertyMetadata); } 
	    	set { this.SetValue(SalesOrderHeadersPropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.List)]
	    public RelatedList<SalesOrderHeader> SalesOrderHeaders1 
	    { 
	    	get { return (RelatedList<SalesOrderHeader>)this.GetValue(SalesOrderHeaders1PropertyMetadata); } 
	    	set { this.SetValue(SalesOrderHeaders1PropertyMetadata, value); } 
	    }


        #endregion
    }
    public partial class Customer : EntityBase
    {
        #region Constructors

        public Customer()
        {
        }
    
        protected override void Initialize()
        {
            base.Initialize();
            
            this.CustomerAddresses = new RelatedList<CustomerAddress>(this, CustomerAddressesPropertyMetadata);
            this.SalesOrderHeaders = new RelatedList<SalesOrderHeader>(this, SalesOrderHeadersPropertyMetadata);
        }
        static Customer()
        {
            _Initialize();
        }
    
        internal static void _Initialize()
        {
            EntityRelations.Initialize();
        }

        #endregion
    
        #region Property Definitions

        public static EntityProperty CustomerIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Customer, int>("CustomerID", false, true, true));

        public static EntityProperty NameStylePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Customer, bool>("NameStyle", false, false, false));

        public static EntityProperty TitlePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Customer, string>("Title", true, false, false));

        public static EntityProperty FirstNamePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Customer, string>("FirstName", false, false, false));

        public static EntityProperty MiddleNamePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Customer, string>("MiddleName", true, false, false));

        public static EntityProperty LastNamePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Customer, string>("LastName", false, false, false));

        public static EntityProperty SuffixPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Customer, string>("Suffix", true, false, false));

        public static EntityProperty CompanyNamePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Customer, string>("CompanyName", true, false, false));

        public static EntityProperty SalesPersonPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Customer, string>("SalesPerson", true, false, false));

        public static EntityProperty EmailAddressPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Customer, string>("EmailAddress", true, false, false));

        public static EntityProperty PhonePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Customer, string>("Phone", true, false, false));

        public static EntityProperty PasswordHashPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Customer, string>("PasswordHash", false, false, false));

        public static EntityProperty PasswordSaltPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Customer, string>("PasswordSalt", false, false, false));

        public static EntityProperty rowguidPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Customer, System.Guid>("rowguid", false, false, false));

        public static EntityProperty ModifiedDatePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Customer, System.DateTime>("ModifiedDate", false, false, false));

        public static EntityProperty CustomerAddressesPropertyMetadata = 
            EntityMetadata.Register(new NavigationListEntityProperty<Customer, RelatedList<CustomerAddress>>("CustomerAddresses", false, "", QueryDirection.Children));

        public static EntityProperty SalesOrderHeadersPropertyMetadata = 
            EntityMetadata.Register(new NavigationListEntityProperty<Customer, RelatedList<SalesOrderHeader>>("SalesOrderHeaders", false, "", QueryDirection.Children));


        #endregion
    
        #region Properties

        [PrimaryKey]
	    [AutoIncrement]
	    public int CustomerID 
	    { 
		    get { return (int)this.GetValue(CustomerIDPropertyMetadata); } 
		    set { this.SetValue(CustomerIDPropertyMetadata, value); } 
	    }

        public bool NameStyle 
	    { 
		    get { return (bool)this.GetValue(NameStylePropertyMetadata); } 
		    set { this.SetValue(NameStylePropertyMetadata, value); } 
	    }

        [MaxLength(8)]
	    public string Title 
	    { 
		    get { return (string)this.GetValue(TitlePropertyMetadata); } 
		    set { this.SetValue(TitlePropertyMetadata, value); } 
	    }

        [MaxLength(50)]
	    public string FirstName 
	    { 
		    get { return (string)this.GetValue(FirstNamePropertyMetadata); } 
		    set { this.SetValue(FirstNamePropertyMetadata, value); } 
	    }

        [MaxLength(50)]
	    public string MiddleName 
	    { 
		    get { return (string)this.GetValue(MiddleNamePropertyMetadata); } 
		    set { this.SetValue(MiddleNamePropertyMetadata, value); } 
	    }

        [MaxLength(50)]
	    public string LastName 
	    { 
		    get { return (string)this.GetValue(LastNamePropertyMetadata); } 
		    set { this.SetValue(LastNamePropertyMetadata, value); } 
	    }

        [MaxLength(10)]
	    public string Suffix 
	    { 
		    get { return (string)this.GetValue(SuffixPropertyMetadata); } 
		    set { this.SetValue(SuffixPropertyMetadata, value); } 
	    }

        [MaxLength(128)]
	    public string CompanyName 
	    { 
		    get { return (string)this.GetValue(CompanyNamePropertyMetadata); } 
		    set { this.SetValue(CompanyNamePropertyMetadata, value); } 
	    }

        [MaxLength(256)]
	    public string SalesPerson 
	    { 
		    get { return (string)this.GetValue(SalesPersonPropertyMetadata); } 
		    set { this.SetValue(SalesPersonPropertyMetadata, value); } 
	    }

        [MaxLength(50)]
	    public string EmailAddress 
	    { 
		    get { return (string)this.GetValue(EmailAddressPropertyMetadata); } 
		    set { this.SetValue(EmailAddressPropertyMetadata, value); } 
	    }

        [MaxLength(25)]
	    public string Phone 
	    { 
		    get { return (string)this.GetValue(PhonePropertyMetadata); } 
		    set { this.SetValue(PhonePropertyMetadata, value); } 
	    }

        [MaxLength(128)]
	    public string PasswordHash 
	    { 
		    get { return (string)this.GetValue(PasswordHashPropertyMetadata); } 
		    set { this.SetValue(PasswordHashPropertyMetadata, value); } 
	    }

        [MaxLength(10)]
	    public string PasswordSalt 
	    { 
		    get { return (string)this.GetValue(PasswordSaltPropertyMetadata); } 
		    set { this.SetValue(PasswordSaltPropertyMetadata, value); } 
	    }

        public System.Guid rowguid 
	    { 
		    get { return (System.Guid)this.GetValue(rowguidPropertyMetadata); } 
		    set { this.SetValue(rowguidPropertyMetadata, value); } 
	    }

        public System.DateTime ModifiedDate 
	    { 
		    get { return (System.DateTime)this.GetValue(ModifiedDatePropertyMetadata); } 
		    set { this.SetValue(ModifiedDatePropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.List)]
	    public RelatedList<CustomerAddress> CustomerAddresses 
	    { 
	    	get { return (RelatedList<CustomerAddress>)this.GetValue(CustomerAddressesPropertyMetadata); } 
	    	set { this.SetValue(CustomerAddressesPropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.List)]
	    public RelatedList<SalesOrderHeader> SalesOrderHeaders 
	    { 
	    	get { return (RelatedList<SalesOrderHeader>)this.GetValue(SalesOrderHeadersPropertyMetadata); } 
	    	set { this.SetValue(SalesOrderHeadersPropertyMetadata, value); } 
	    }


        #endregion
    }
    public partial class CustomerAddress : EntityBase
    {
        #region Constructors

        static CustomerAddress()
        {
            _Initialize();
        }
    
        internal static void _Initialize()
        {
            EntityRelations.Initialize();
        }

        #endregion
    
        #region Property Definitions

        public static EntityProperty CustomerIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<CustomerAddress, int>("CustomerID", false, true, false, "Customer"));

        public static EntityProperty AddressIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<CustomerAddress, int>("AddressID", false, true, false, "Address"));

        public static EntityProperty AddressTypePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<CustomerAddress, string>("AddressType", false, false, false));

        public static EntityProperty rowguidPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<CustomerAddress, System.Guid>("rowguid", false, false, false));

        public static EntityProperty ModifiedDatePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<CustomerAddress, System.DateTime>("ModifiedDate", false, false, false));

        public static EntityProperty AddressPropertyMetadata = 
            EntityMetadata.Register(new NavigationScalarEntityProperty<CustomerAddress, Address>("Address", false, "", QueryDirection.Parent));

        public static EntityProperty CustomerPropertyMetadata = 
            EntityMetadata.Register(new NavigationScalarEntityProperty<CustomerAddress, Customer>("Customer", false, "", QueryDirection.Parent));


        #endregion
    
        #region Properties

        [PrimaryKey]
	    [ForeignKey(typeof(Customer), "CustomerID", "Customer", Name = "FK_CustomerAddress_Customer_CustomerID")]
	    public int CustomerID 
	    { 
		    get { return (int)this.GetValue(CustomerIDPropertyMetadata); } 
		    set { this.SetValue(CustomerIDPropertyMetadata, value); } 
	    }

        [PrimaryKey]
	    [ForeignKey(typeof(Address), "AddressID", "Address", Name = "FK_CustomerAddress_Address_AddressID")]
	    public int AddressID 
	    { 
		    get { return (int)this.GetValue(AddressIDPropertyMetadata); } 
		    set { this.SetValue(AddressIDPropertyMetadata, value); } 
	    }

        [MaxLength(50)]
	    public string AddressType 
	    { 
		    get { return (string)this.GetValue(AddressTypePropertyMetadata); } 
		    set { this.SetValue(AddressTypePropertyMetadata, value); } 
	    }

        public System.Guid rowguid 
	    { 
		    get { return (System.Guid)this.GetValue(rowguidPropertyMetadata); } 
		    set { this.SetValue(rowguidPropertyMetadata, value); } 
	    }

        public System.DateTime ModifiedDate 
	    { 
		    get { return (System.DateTime)this.GetValue(ModifiedDatePropertyMetadata); } 
		    set { this.SetValue(ModifiedDatePropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.Scalar)]
	    public Address Address 
	    { 
	    	get { return (Address)this.GetValue(AddressPropertyMetadata); } 
	    	set { this.SetValue(AddressPropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.Scalar)]
	    public Customer Customer 
	    { 
	    	get { return (Customer)this.GetValue(CustomerPropertyMetadata); } 
	    	set { this.SetValue(CustomerPropertyMetadata, value); } 
	    }


        #endregion
    }
    public partial class Product : EntityBase
    {
        #region Constructors

        public Product()
        {
        }
    
        protected override void Initialize()
        {
            base.Initialize();
            
            this.SalesOrderDetails = new RelatedList<SalesOrderDetail>(this, SalesOrderDetailsPropertyMetadata);
        }
        static Product()
        {
            _Initialize();
        }
    
        internal static void _Initialize()
        {
            EntityRelations.Initialize();
        }

        #endregion
    
        #region Property Definitions

        public static EntityProperty ProductIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Product, int>("ProductID", false, true, true));

        public static EntityProperty NamePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Product, string>("Name", false, false, false));

        public static EntityProperty ProductNumberPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Product, string>("ProductNumber", false, false, false));

        public static EntityProperty ColorPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Product, string>("Color", true, false, false));

        public static EntityProperty StandardCostPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Product, decimal>("StandardCost", false, false, false));

        public static EntityProperty ListPricePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Product, decimal>("ListPrice", false, false, false));

        public static EntityProperty SizePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Product, string>("Size", true, false, false));

        public static EntityProperty WeightPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Product, Nullable<decimal>>("Weight", true, false, false));

        public static EntityProperty ProductCategoryIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Product, Nullable<int>>("ProductCategoryID", true, false, false, "ProductCategory"));

        public static EntityProperty ProductModelIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Product, Nullable<int>>("ProductModelID", true, false, false, "ProductModel"));

        public static EntityProperty SellStartDatePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Product, System.DateTime>("SellStartDate", false, false, false));

        public static EntityProperty SellEndDatePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Product, Nullable<System.DateTime>>("SellEndDate", true, false, false));

        public static EntityProperty DiscontinuedDatePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Product, Nullable<System.DateTime>>("DiscontinuedDate", true, false, false));

        public static EntityProperty ThumbNailPhotoPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Product, byte[]>("ThumbNailPhoto", true, false, false));

        public static EntityProperty ThumbnailPhotoFileNamePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Product, string>("ThumbnailPhotoFileName", true, false, false));

        public static EntityProperty rowguidPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Product, System.Guid>("rowguid", false, false, false));

        public static EntityProperty ModifiedDatePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<Product, System.DateTime>("ModifiedDate", false, false, false));

        public static EntityProperty ProductCategoryPropertyMetadata = 
            EntityMetadata.Register(new NavigationScalarEntityProperty<Product, ProductCategory>("ProductCategory", false, "", QueryDirection.Parent));

        public static EntityProperty ProductModelPropertyMetadata = 
            EntityMetadata.Register(new NavigationScalarEntityProperty<Product, ProductModel>("ProductModel", false, "", QueryDirection.Parent));

        public static EntityProperty SalesOrderDetailsPropertyMetadata = 
            EntityMetadata.Register(new NavigationListEntityProperty<Product, RelatedList<SalesOrderDetail>>("SalesOrderDetails", false, "", QueryDirection.Children));


        #endregion
    
        #region Properties

        [PrimaryKey]
	    [AutoIncrement]
	    public int ProductID 
	    { 
		    get { return (int)this.GetValue(ProductIDPropertyMetadata); } 
		    set { this.SetValue(ProductIDPropertyMetadata, value); } 
	    }

        [MaxLength(50)]
	    public string Name 
	    { 
		    get { return (string)this.GetValue(NamePropertyMetadata); } 
		    set { this.SetValue(NamePropertyMetadata, value); } 
	    }

        [MaxLength(25)]
	    public string ProductNumber 
	    { 
		    get { return (string)this.GetValue(ProductNumberPropertyMetadata); } 
		    set { this.SetValue(ProductNumberPropertyMetadata, value); } 
	    }

        [MaxLength(15)]
	    public string Color 
	    { 
		    get { return (string)this.GetValue(ColorPropertyMetadata); } 
		    set { this.SetValue(ColorPropertyMetadata, value); } 
	    }

        public decimal StandardCost 
	    { 
		    get { return (decimal)this.GetValue(StandardCostPropertyMetadata); } 
		    set { this.SetValue(StandardCostPropertyMetadata, value); } 
	    }

        public decimal ListPrice 
	    { 
		    get { return (decimal)this.GetValue(ListPricePropertyMetadata); } 
		    set { this.SetValue(ListPricePropertyMetadata, value); } 
	    }

        [MaxLength(5)]
	    public string Size 
	    { 
		    get { return (string)this.GetValue(SizePropertyMetadata); } 
		    set { this.SetValue(SizePropertyMetadata, value); } 
	    }

        public Nullable<decimal> Weight 
	    { 
		    get { return (Nullable<decimal>)this.GetValue(WeightPropertyMetadata); } 
		    set { this.SetValue(WeightPropertyMetadata, value); } 
	    }

        [ForeignKey(typeof(ProductCategory), "ProductCategoryID", "ProductCategory", Name = "FK_Product_ProductCategory_ProductCategoryID")]
	    public Nullable<int> ProductCategoryID 
	    { 
		    get { return (Nullable<int>)this.GetValue(ProductCategoryIDPropertyMetadata); } 
		    set { this.SetValue(ProductCategoryIDPropertyMetadata, value); } 
	    }

        [ForeignKey(typeof(ProductModel), "ProductModelID", "ProductModel", Name = "FK_Product_ProductModel_ProductModelID")]
	    public Nullable<int> ProductModelID 
	    { 
		    get { return (Nullable<int>)this.GetValue(ProductModelIDPropertyMetadata); } 
		    set { this.SetValue(ProductModelIDPropertyMetadata, value); } 
	    }

        public System.DateTime SellStartDate 
	    { 
		    get { return (System.DateTime)this.GetValue(SellStartDatePropertyMetadata); } 
		    set { this.SetValue(SellStartDatePropertyMetadata, value); } 
	    }

        public Nullable<System.DateTime> SellEndDate 
	    { 
		    get { return (Nullable<System.DateTime>)this.GetValue(SellEndDatePropertyMetadata); } 
		    set { this.SetValue(SellEndDatePropertyMetadata, value); } 
	    }

        public Nullable<System.DateTime> DiscontinuedDate 
	    { 
		    get { return (Nullable<System.DateTime>)this.GetValue(DiscontinuedDatePropertyMetadata); } 
		    set { this.SetValue(DiscontinuedDatePropertyMetadata, value); } 
	    }

        public byte[] ThumbNailPhoto 
	    { 
		    get { return (byte[])this.GetValue(ThumbNailPhotoPropertyMetadata); } 
		    set { this.SetValue(ThumbNailPhotoPropertyMetadata, value); } 
	    }

        [MaxLength(50)]
	    public string ThumbnailPhotoFileName 
	    { 
		    get { return (string)this.GetValue(ThumbnailPhotoFileNamePropertyMetadata); } 
		    set { this.SetValue(ThumbnailPhotoFileNamePropertyMetadata, value); } 
	    }

        public System.Guid rowguid 
	    { 
		    get { return (System.Guid)this.GetValue(rowguidPropertyMetadata); } 
		    set { this.SetValue(rowguidPropertyMetadata, value); } 
	    }

        public System.DateTime ModifiedDate 
	    { 
		    get { return (System.DateTime)this.GetValue(ModifiedDatePropertyMetadata); } 
		    set { this.SetValue(ModifiedDatePropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.Scalar)]
	    public ProductCategory ProductCategory 
	    { 
	    	get { return (ProductCategory)this.GetValue(ProductCategoryPropertyMetadata); } 
	    	set { this.SetValue(ProductCategoryPropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.Scalar)]
	    public ProductModel ProductModel 
	    { 
	    	get { return (ProductModel)this.GetValue(ProductModelPropertyMetadata); } 
	    	set { this.SetValue(ProductModelPropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.List)]
	    public RelatedList<SalesOrderDetail> SalesOrderDetails 
	    { 
	    	get { return (RelatedList<SalesOrderDetail>)this.GetValue(SalesOrderDetailsPropertyMetadata); } 
	    	set { this.SetValue(SalesOrderDetailsPropertyMetadata, value); } 
	    }


        #endregion
    }
    public partial class ProductCategory : EntityBase
    {
        #region Constructors

        public ProductCategory()
        {
        }
    
        protected override void Initialize()
        {
            base.Initialize();
            
            this.Products = new RelatedList<Product>(this, ProductsPropertyMetadata);
            this.ProductCategory1 = new RelatedList<ProductCategory>(this, ProductCategory1PropertyMetadata);
        }
        static ProductCategory()
        {
            _Initialize();
        }
    
        internal static void _Initialize()
        {
            EntityRelations.Initialize();
        }

        #endregion
    
        #region Property Definitions

        public static EntityProperty ProductCategoryIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductCategory, int>("ProductCategoryID", false, true, true));

        public static EntityProperty ParentProductCategoryIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductCategory, Nullable<int>>("ParentProductCategoryID", true, false, false, "ProductCategory2", "ProductCategoryID"));

        public static EntityProperty NamePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductCategory, string>("Name", false, false, false));

        public static EntityProperty rowguidPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductCategory, System.Guid>("rowguid", false, false, false));

        public static EntityProperty ModifiedDatePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductCategory, System.DateTime>("ModifiedDate", false, false, false));

        public static EntityProperty ProductsPropertyMetadata = 
            EntityMetadata.Register(new NavigationListEntityProperty<ProductCategory, RelatedList<Product>>("Products", false, "", QueryDirection.Children));

        public static EntityProperty ProductCategory1PropertyMetadata = 
            EntityMetadata.Register(new NavigationListEntityProperty<ProductCategory, RelatedList<ProductCategory>>("ProductCategory1", false, "", QueryDirection.Children));

        public static EntityProperty ProductCategory2PropertyMetadata = 
            EntityMetadata.Register(new NavigationScalarEntityProperty<ProductCategory, ProductCategory>("ProductCategory2", false, "", QueryDirection.Parent));


        #endregion
    
        #region Properties

        [PrimaryKey]
	    [AutoIncrement]
	    public int ProductCategoryID 
	    { 
		    get { return (int)this.GetValue(ProductCategoryIDPropertyMetadata); } 
		    set { this.SetValue(ProductCategoryIDPropertyMetadata, value); } 
	    }

        [ForeignKey(typeof(ProductCategory), "ProductCategoryID", "ProductCategory2", Name = "FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID")]
	    public Nullable<int> ParentProductCategoryID 
	    { 
		    get { return (Nullable<int>)this.GetValue(ParentProductCategoryIDPropertyMetadata); } 
		    set { this.SetValue(ParentProductCategoryIDPropertyMetadata, value); } 
	    }

        [MaxLength(50)]
	    public string Name 
	    { 
		    get { return (string)this.GetValue(NamePropertyMetadata); } 
		    set { this.SetValue(NamePropertyMetadata, value); } 
	    }

        public System.Guid rowguid 
	    { 
		    get { return (System.Guid)this.GetValue(rowguidPropertyMetadata); } 
		    set { this.SetValue(rowguidPropertyMetadata, value); } 
	    }

        public System.DateTime ModifiedDate 
	    { 
		    get { return (System.DateTime)this.GetValue(ModifiedDatePropertyMetadata); } 
		    set { this.SetValue(ModifiedDatePropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.List)]
	    public RelatedList<Product> Products 
	    { 
	    	get { return (RelatedList<Product>)this.GetValue(ProductsPropertyMetadata); } 
	    	set { this.SetValue(ProductsPropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.List)]
	    public RelatedList<ProductCategory> ProductCategory1 
	    { 
	    	get { return (RelatedList<ProductCategory>)this.GetValue(ProductCategory1PropertyMetadata); } 
	    	set { this.SetValue(ProductCategory1PropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.Scalar)]
	    public ProductCategory ProductCategory2 
	    { 
	    	get { return (ProductCategory)this.GetValue(ProductCategory2PropertyMetadata); } 
	    	set { this.SetValue(ProductCategory2PropertyMetadata, value); } 
	    }


        #endregion
    }
    public partial class ProductDescription : EntityBase
    {
        #region Constructors

        public ProductDescription()
        {
        }
    
        protected override void Initialize()
        {
            base.Initialize();
            
            this.ProductModelProductDescriptions = new RelatedList<ProductModelProductDescription>(this, ProductModelProductDescriptionsPropertyMetadata);
        }
        static ProductDescription()
        {
            _Initialize();
        }
    
        internal static void _Initialize()
        {
            EntityRelations.Initialize();
        }

        #endregion
    
        #region Property Definitions

        public static EntityProperty ProductDescriptionIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductDescription, int>("ProductDescriptionID", false, true, true));

        public static EntityProperty DescriptionPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductDescription, string>("Description", false, false, false));

        public static EntityProperty rowguidPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductDescription, System.Guid>("rowguid", false, false, false));

        public static EntityProperty ModifiedDatePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductDescription, System.DateTime>("ModifiedDate", false, false, false));

        public static EntityProperty ProductModelProductDescriptionsPropertyMetadata = 
            EntityMetadata.Register(new NavigationListEntityProperty<ProductDescription, RelatedList<ProductModelProductDescription>>("ProductModelProductDescriptions", false, "", QueryDirection.Children));


        #endregion
    
        #region Properties

        [PrimaryKey]
	    [AutoIncrement]
	    public int ProductDescriptionID 
	    { 
		    get { return (int)this.GetValue(ProductDescriptionIDPropertyMetadata); } 
		    set { this.SetValue(ProductDescriptionIDPropertyMetadata, value); } 
	    }

        [MaxLength(400)]
	    public string Description 
	    { 
		    get { return (string)this.GetValue(DescriptionPropertyMetadata); } 
		    set { this.SetValue(DescriptionPropertyMetadata, value); } 
	    }

        public System.Guid rowguid 
	    { 
		    get { return (System.Guid)this.GetValue(rowguidPropertyMetadata); } 
		    set { this.SetValue(rowguidPropertyMetadata, value); } 
	    }

        public System.DateTime ModifiedDate 
	    { 
		    get { return (System.DateTime)this.GetValue(ModifiedDatePropertyMetadata); } 
		    set { this.SetValue(ModifiedDatePropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.List)]
	    public RelatedList<ProductModelProductDescription> ProductModelProductDescriptions 
	    { 
	    	get { return (RelatedList<ProductModelProductDescription>)this.GetValue(ProductModelProductDescriptionsPropertyMetadata); } 
	    	set { this.SetValue(ProductModelProductDescriptionsPropertyMetadata, value); } 
	    }


        #endregion
    }
    public partial class ProductModel : EntityBase
    {
        #region Constructors

        public ProductModel()
        {
        }
    
        protected override void Initialize()
        {
            base.Initialize();
            
            this.Products = new RelatedList<Product>(this, ProductsPropertyMetadata);
            this.ProductModelProductDescriptions = new RelatedList<ProductModelProductDescription>(this, ProductModelProductDescriptionsPropertyMetadata);
        }
        static ProductModel()
        {
            _Initialize();
        }
    
        internal static void _Initialize()
        {
            EntityRelations.Initialize();
        }

        #endregion
    
        #region Property Definitions

        public static EntityProperty ProductModelIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductModel, int>("ProductModelID", false, true, true));

        public static EntityProperty NamePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductModel, string>("Name", false, false, false));

        public static EntityProperty CatalogDescriptionPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductModel, string>("CatalogDescription", true, false, false));

        public static EntityProperty rowguidPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductModel, System.Guid>("rowguid", false, false, false));

        public static EntityProperty ModifiedDatePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductModel, System.DateTime>("ModifiedDate", false, false, false));

        public static EntityProperty ProductsPropertyMetadata = 
            EntityMetadata.Register(new NavigationListEntityProperty<ProductModel, RelatedList<Product>>("Products", false, "", QueryDirection.Children));

        public static EntityProperty ProductModelProductDescriptionsPropertyMetadata = 
            EntityMetadata.Register(new NavigationListEntityProperty<ProductModel, RelatedList<ProductModelProductDescription>>("ProductModelProductDescriptions", false, "", QueryDirection.Children));


        #endregion
    
        #region Properties

        [PrimaryKey]
	    [AutoIncrement]
	    public int ProductModelID 
	    { 
		    get { return (int)this.GetValue(ProductModelIDPropertyMetadata); } 
		    set { this.SetValue(ProductModelIDPropertyMetadata, value); } 
	    }

        [MaxLength(50)]
	    public string Name 
	    { 
		    get { return (string)this.GetValue(NamePropertyMetadata); } 
		    set { this.SetValue(NamePropertyMetadata, value); } 
	    }

        public string CatalogDescription 
	    { 
		    get { return (string)this.GetValue(CatalogDescriptionPropertyMetadata); } 
		    set { this.SetValue(CatalogDescriptionPropertyMetadata, value); } 
	    }

        public System.Guid rowguid 
	    { 
		    get { return (System.Guid)this.GetValue(rowguidPropertyMetadata); } 
		    set { this.SetValue(rowguidPropertyMetadata, value); } 
	    }

        public System.DateTime ModifiedDate 
	    { 
		    get { return (System.DateTime)this.GetValue(ModifiedDatePropertyMetadata); } 
		    set { this.SetValue(ModifiedDatePropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.List)]
	    public RelatedList<Product> Products 
	    { 
	    	get { return (RelatedList<Product>)this.GetValue(ProductsPropertyMetadata); } 
	    	set { this.SetValue(ProductsPropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.List)]
	    public RelatedList<ProductModelProductDescription> ProductModelProductDescriptions 
	    { 
	    	get { return (RelatedList<ProductModelProductDescription>)this.GetValue(ProductModelProductDescriptionsPropertyMetadata); } 
	    	set { this.SetValue(ProductModelProductDescriptionsPropertyMetadata, value); } 
	    }


        #endregion
    }
    public partial class ProductModelProductDescription : EntityBase
    {
        #region Constructors

        static ProductModelProductDescription()
        {
            _Initialize();
        }
    
        internal static void _Initialize()
        {
            EntityRelations.Initialize();
        }

        #endregion
    
        #region Property Definitions

        public static EntityProperty ProductModelIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductModelProductDescription, int>("ProductModelID", false, true, false, "ProductModel"));

        public static EntityProperty ProductDescriptionIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductModelProductDescription, int>("ProductDescriptionID", false, true, false, "ProductDescription"));

        public static EntityProperty CulturePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductModelProductDescription, string>("Culture", false, true, false));

        public static EntityProperty rowguidPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductModelProductDescription, System.Guid>("rowguid", false, false, false));

        public static EntityProperty ModifiedDatePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<ProductModelProductDescription, System.DateTime>("ModifiedDate", false, false, false));

        public static EntityProperty ProductDescriptionPropertyMetadata = 
            EntityMetadata.Register(new NavigationScalarEntityProperty<ProductModelProductDescription, ProductDescription>("ProductDescription", false, "", QueryDirection.Parent));

        public static EntityProperty ProductModelPropertyMetadata = 
            EntityMetadata.Register(new NavigationScalarEntityProperty<ProductModelProductDescription, ProductModel>("ProductModel", false, "", QueryDirection.Parent));


        #endregion
    
        #region Properties

        [PrimaryKey]
	    [ForeignKey(typeof(ProductModel), "ProductModelID", "ProductModel", Name = "FK_ProductModelProductDescription_ProductModel_ProductModelID")]
	    public int ProductModelID 
	    { 
		    get { return (int)this.GetValue(ProductModelIDPropertyMetadata); } 
		    set { this.SetValue(ProductModelIDPropertyMetadata, value); } 
	    }

        [PrimaryKey]
	    [ForeignKey(typeof(ProductDescription), "ProductDescriptionID", "ProductDescription", Name = "FK_ProductModelProductDescription_ProductDescription_ProductDescriptionID")]
	    public int ProductDescriptionID 
	    { 
		    get { return (int)this.GetValue(ProductDescriptionIDPropertyMetadata); } 
		    set { this.SetValue(ProductDescriptionIDPropertyMetadata, value); } 
	    }

        [PrimaryKey]
	    [MaxLength(6)]
	    public string Culture 
	    { 
		    get { return (string)this.GetValue(CulturePropertyMetadata); } 
		    set { this.SetValue(CulturePropertyMetadata, value); } 
	    }

        public System.Guid rowguid 
	    { 
		    get { return (System.Guid)this.GetValue(rowguidPropertyMetadata); } 
		    set { this.SetValue(rowguidPropertyMetadata, value); } 
	    }

        public System.DateTime ModifiedDate 
	    { 
		    get { return (System.DateTime)this.GetValue(ModifiedDatePropertyMetadata); } 
		    set { this.SetValue(ModifiedDatePropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.Scalar)]
	    public ProductDescription ProductDescription 
	    { 
	    	get { return (ProductDescription)this.GetValue(ProductDescriptionPropertyMetadata); } 
	    	set { this.SetValue(ProductDescriptionPropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.Scalar)]
	    public ProductModel ProductModel 
	    { 
	    	get { return (ProductModel)this.GetValue(ProductModelPropertyMetadata); } 
	    	set { this.SetValue(ProductModelPropertyMetadata, value); } 
	    }


        #endregion
    }
    public partial class SalesOrderDetail : EntityBase
    {
        #region Constructors

        static SalesOrderDetail()
        {
            _Initialize();
        }
    
        internal static void _Initialize()
        {
            EntityRelations.Initialize();
        }

        #endregion
    
        #region Property Definitions

        public static EntityProperty SalesOrderIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderDetail, int>("SalesOrderID", false, true, false, "SalesOrderHeader"));

        public static EntityProperty SalesOrderDetailIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderDetail, int>("SalesOrderDetailID", false, true, true));

        public static EntityProperty OrderQtyPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderDetail, short>("OrderQty", false, false, false));

        public static EntityProperty ProductIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderDetail, int>("ProductID", false, false, false, "Product"));

        public static EntityProperty UnitPricePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderDetail, decimal>("UnitPrice", false, false, false));

        public static EntityProperty UnitPriceDiscountPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderDetail, decimal>("UnitPriceDiscount", false, false, false));

        public static EntityProperty rowguidPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderDetail, System.Guid>("rowguid", false, false, false));

        public static EntityProperty ModifiedDatePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderDetail, System.DateTime>("ModifiedDate", false, false, false));

        public static EntityProperty ProductPropertyMetadata = 
            EntityMetadata.Register(new NavigationScalarEntityProperty<SalesOrderDetail, Product>("Product", false, "", QueryDirection.Parent));

        public static EntityProperty SalesOrderHeaderPropertyMetadata = 
            EntityMetadata.Register(new NavigationScalarEntityProperty<SalesOrderDetail, SalesOrderHeader>("SalesOrderHeader", false, "", QueryDirection.Parent));


        #endregion
    
        #region Properties

        [PrimaryKey]
	    [ForeignKey(typeof(SalesOrderHeader), "SalesOrderID", "SalesOrderHeader", Name = "FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID")]
	    public int SalesOrderID 
	    { 
		    get { return (int)this.GetValue(SalesOrderIDPropertyMetadata); } 
		    set { this.SetValue(SalesOrderIDPropertyMetadata, value); } 
	    }

        [PrimaryKey]
	    [AutoIncrement]
	    public int SalesOrderDetailID 
	    { 
		    get { return (int)this.GetValue(SalesOrderDetailIDPropertyMetadata); } 
		    set { this.SetValue(SalesOrderDetailIDPropertyMetadata, value); } 
	    }

        public short OrderQty 
	    { 
		    get { return (short)this.GetValue(OrderQtyPropertyMetadata); } 
		    set { this.SetValue(OrderQtyPropertyMetadata, value); } 
	    }

        [ForeignKey(typeof(Product), "ProductID", "Product", Name = "FK_SalesOrderDetail_Product_ProductID")]
	    public int ProductID 
	    { 
		    get { return (int)this.GetValue(ProductIDPropertyMetadata); } 
		    set { this.SetValue(ProductIDPropertyMetadata, value); } 
	    }

        public decimal UnitPrice 
	    { 
		    get { return (decimal)this.GetValue(UnitPricePropertyMetadata); } 
		    set { this.SetValue(UnitPricePropertyMetadata, value); } 
	    }

        public decimal UnitPriceDiscount 
	    { 
		    get { return (decimal)this.GetValue(UnitPriceDiscountPropertyMetadata); } 
		    set { this.SetValue(UnitPriceDiscountPropertyMetadata, value); } 
	    }

        public System.Guid rowguid 
	    { 
		    get { return (System.Guid)this.GetValue(rowguidPropertyMetadata); } 
		    set { this.SetValue(rowguidPropertyMetadata, value); } 
	    }

        public System.DateTime ModifiedDate 
	    { 
		    get { return (System.DateTime)this.GetValue(ModifiedDatePropertyMetadata); } 
		    set { this.SetValue(ModifiedDatePropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.Scalar)]
	    public Product Product 
	    { 
	    	get { return (Product)this.GetValue(ProductPropertyMetadata); } 
	    	set { this.SetValue(ProductPropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.Scalar)]
	    public SalesOrderHeader SalesOrderHeader 
	    { 
	    	get { return (SalesOrderHeader)this.GetValue(SalesOrderHeaderPropertyMetadata); } 
	    	set { this.SetValue(SalesOrderHeaderPropertyMetadata, value); } 
	    }


        #endregion
    }
    public partial class SalesOrderHeader : EntityBase
    {
        #region Constructors

        public SalesOrderHeader()
        {
        }
    
        protected override void Initialize()
        {
            base.Initialize();
            
            this.SalesOrderDetails = new RelatedList<SalesOrderDetail>(this, SalesOrderDetailsPropertyMetadata);
        }
        static SalesOrderHeader()
        {
            _Initialize();
        }
    
        internal static void _Initialize()
        {
            EntityRelations.Initialize();
        }

        #endregion
    
        #region Property Definitions

        public static EntityProperty SalesOrderIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, int>("SalesOrderID", false, true, true));

        public static EntityProperty RevisionNumberPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, byte>("RevisionNumber", false, false, false));

        public static EntityProperty OrderDatePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, System.DateTime>("OrderDate", false, false, false));

        public static EntityProperty DueDatePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, System.DateTime>("DueDate", false, false, false));

        public static EntityProperty ShipDatePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, Nullable<System.DateTime>>("ShipDate", true, false, false));

        public static EntityProperty StatusPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, byte>("Status", false, false, false));

        public static EntityProperty OnlineOrderFlagPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, bool>("OnlineOrderFlag", false, false, false));

        public static EntityProperty SalesOrderNumberPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, string>("SalesOrderNumber", false, false, false));

        public static EntityProperty PurchaseOrderNumberPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, string>("PurchaseOrderNumber", true, false, false));

        public static EntityProperty AccountNumberPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, string>("AccountNumber", true, false, false));

        public static EntityProperty CustomerIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, int>("CustomerID", false, false, false, "Customer"));

        public static EntityProperty ShipToAddressIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, Nullable<int>>("ShipToAddressID", true, false, false, "Address1", "AddressID"));

        public static EntityProperty BillToAddressIDPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, Nullable<int>>("BillToAddressID", true, false, false, "Address", "AddressID"));

        public static EntityProperty ShipMethodPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, string>("ShipMethod", false, false, false));

        public static EntityProperty CreditCardApprovalCodePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, string>("CreditCardApprovalCode", true, false, false));

        public static EntityProperty TaxAmtPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, decimal>("TaxAmt", false, false, false));

        public static EntityProperty FreightPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, decimal>("Freight", false, false, false));

        public static EntityProperty CommentPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, string>("Comment", true, false, false));

        public static EntityProperty rowguidPropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, System.Guid>("rowguid", false, false, false));

        public static EntityProperty ModifiedDatePropertyMetadata =
            EntityMetadata.Register(new DataEntityProperty<SalesOrderHeader, System.DateTime>("ModifiedDate", false, false, false));

        public static EntityProperty AddressPropertyMetadata = 
            EntityMetadata.Register(new NavigationScalarEntityProperty<SalesOrderHeader, Address>("Address", false, "", QueryDirection.Parent));

        public static EntityProperty Address1PropertyMetadata = 
            EntityMetadata.Register(new NavigationScalarEntityProperty<SalesOrderHeader, Address>("Address1", false, "", QueryDirection.Parent));

        public static EntityProperty CustomerPropertyMetadata = 
            EntityMetadata.Register(new NavigationScalarEntityProperty<SalesOrderHeader, Customer>("Customer", false, "", QueryDirection.Parent));

        public static EntityProperty SalesOrderDetailsPropertyMetadata = 
            EntityMetadata.Register(new NavigationListEntityProperty<SalesOrderHeader, RelatedList<SalesOrderDetail>>("SalesOrderDetails", false, "", QueryDirection.Children));


        #endregion
    
        #region Properties

        [PrimaryKey]
	    [AutoIncrement]
	    public int SalesOrderID 
	    { 
		    get { return (int)this.GetValue(SalesOrderIDPropertyMetadata); } 
		    set { this.SetValue(SalesOrderIDPropertyMetadata, value); } 
	    }

        public byte RevisionNumber 
	    { 
		    get { return (byte)this.GetValue(RevisionNumberPropertyMetadata); } 
		    set { this.SetValue(RevisionNumberPropertyMetadata, value); } 
	    }

        public System.DateTime OrderDate 
	    { 
		    get { return (System.DateTime)this.GetValue(OrderDatePropertyMetadata); } 
		    set { this.SetValue(OrderDatePropertyMetadata, value); } 
	    }

        public System.DateTime DueDate 
	    { 
		    get { return (System.DateTime)this.GetValue(DueDatePropertyMetadata); } 
		    set { this.SetValue(DueDatePropertyMetadata, value); } 
	    }

        public Nullable<System.DateTime> ShipDate 
	    { 
		    get { return (Nullable<System.DateTime>)this.GetValue(ShipDatePropertyMetadata); } 
		    set { this.SetValue(ShipDatePropertyMetadata, value); } 
	    }

        public byte Status 
	    { 
		    get { return (byte)this.GetValue(StatusPropertyMetadata); } 
		    set { this.SetValue(StatusPropertyMetadata, value); } 
	    }

        public bool OnlineOrderFlag 
	    { 
		    get { return (bool)this.GetValue(OnlineOrderFlagPropertyMetadata); } 
		    set { this.SetValue(OnlineOrderFlagPropertyMetadata, value); } 
	    }

        [MaxLength(25)]
	    public string SalesOrderNumber 
	    { 
		    get { return (string)this.GetValue(SalesOrderNumberPropertyMetadata); } 
		    set { this.SetValue(SalesOrderNumberPropertyMetadata, value); } 
	    }

        [MaxLength(25)]
	    public string PurchaseOrderNumber 
	    { 
		    get { return (string)this.GetValue(PurchaseOrderNumberPropertyMetadata); } 
		    set { this.SetValue(PurchaseOrderNumberPropertyMetadata, value); } 
	    }

        [MaxLength(15)]
	    public string AccountNumber 
	    { 
		    get { return (string)this.GetValue(AccountNumberPropertyMetadata); } 
		    set { this.SetValue(AccountNumberPropertyMetadata, value); } 
	    }

        [ForeignKey(typeof(Customer), "CustomerID", "Customer", Name = "FK_SalesOrderHeader_Customer_CustomerID")]
	    public int CustomerID 
	    { 
		    get { return (int)this.GetValue(CustomerIDPropertyMetadata); } 
		    set { this.SetValue(CustomerIDPropertyMetadata, value); } 
	    }

        [ForeignKey(typeof(Address), "AddressID", "Address1", Name = "FK_SalesOrderHeader_Address_ShipTo_AddressID")]
	    public Nullable<int> ShipToAddressID 
	    { 
		    get { return (Nullable<int>)this.GetValue(ShipToAddressIDPropertyMetadata); } 
		    set { this.SetValue(ShipToAddressIDPropertyMetadata, value); } 
	    }

        [ForeignKey(typeof(Address), "AddressID", "Address", Name = "FK_SalesOrderHeader_Address_BillTo_AddressID")]
	    public Nullable<int> BillToAddressID 
	    { 
		    get { return (Nullable<int>)this.GetValue(BillToAddressIDPropertyMetadata); } 
		    set { this.SetValue(BillToAddressIDPropertyMetadata, value); } 
	    }

        [MaxLength(50)]
	    public string ShipMethod 
	    { 
		    get { return (string)this.GetValue(ShipMethodPropertyMetadata); } 
		    set { this.SetValue(ShipMethodPropertyMetadata, value); } 
	    }

        [MaxLength(15)]
	    public string CreditCardApprovalCode 
	    { 
		    get { return (string)this.GetValue(CreditCardApprovalCodePropertyMetadata); } 
		    set { this.SetValue(CreditCardApprovalCodePropertyMetadata, value); } 
	    }

        public decimal TaxAmt 
	    { 
		    get { return (decimal)this.GetValue(TaxAmtPropertyMetadata); } 
		    set { this.SetValue(TaxAmtPropertyMetadata, value); } 
	    }

        public decimal Freight 
	    { 
		    get { return (decimal)this.GetValue(FreightPropertyMetadata); } 
		    set { this.SetValue(FreightPropertyMetadata, value); } 
	    }

        public string Comment 
	    { 
		    get { return (string)this.GetValue(CommentPropertyMetadata); } 
		    set { this.SetValue(CommentPropertyMetadata, value); } 
	    }

        public System.Guid rowguid 
	    { 
		    get { return (System.Guid)this.GetValue(rowguidPropertyMetadata); } 
		    set { this.SetValue(rowguidPropertyMetadata, value); } 
	    }

        public System.DateTime ModifiedDate 
	    { 
		    get { return (System.DateTime)this.GetValue(ModifiedDatePropertyMetadata); } 
		    set { this.SetValue(ModifiedDatePropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.Scalar)]
	    public Address Address 
	    { 
	    	get { return (Address)this.GetValue(AddressPropertyMetadata); } 
	    	set { this.SetValue(AddressPropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.Scalar)]
	    public Address Address1 
	    { 
	    	get { return (Address)this.GetValue(Address1PropertyMetadata); } 
	    	set { this.SetValue(Address1PropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.Scalar)]
	    public Customer Customer 
	    { 
	    	get { return (Customer)this.GetValue(CustomerPropertyMetadata); } 
	    	set { this.SetValue(CustomerPropertyMetadata, value); } 
	    }

        [NavigationProperty(NavigationPropertyType.List)]
	    public RelatedList<SalesOrderDetail> SalesOrderDetails 
	    { 
	    	get { return (RelatedList<SalesOrderDetail>)this.GetValue(SalesOrderDetailsPropertyMetadata); } 
	    	set { this.SetValue(SalesOrderDetailsPropertyMetadata, value); } 
	    }


        #endregion
    }
    public partial class EntityRelations
    {
        internal static void Initialize()
        {
            EntityContainer.Version = Intersoft.Crosslight.Data.Version.V2;
        }
        public static EntityRelation FK_CustomerAddress_Address_AddressID = EntityRelation.Register(new EntityRelation("FK_CustomerAddress_Address_AddressID",
            typeof(Address), new EntityProperty[] {Address.AddressIDPropertyMetadata}, Multiplicity.One, Address.CustomerAddressesPropertyMetadata,
            typeof(CustomerAddress), new EntityProperty[] {CustomerAddress.AddressIDPropertyMetadata}, Multiplicity.Many, CustomerAddress.AddressPropertyMetadata));
        
        public static EntityRelation FK_SalesOrderHeader_Address_BillTo_AddressID = EntityRelation.Register(new EntityRelation("FK_SalesOrderHeader_Address_BillTo_AddressID",
            typeof(Address), new EntityProperty[] {Address.AddressIDPropertyMetadata}, Multiplicity.ZeroOrOne, Address.SalesOrderHeadersPropertyMetadata,
            typeof(SalesOrderHeader), new EntityProperty[] {SalesOrderHeader.BillToAddressIDPropertyMetadata}, Multiplicity.Many, SalesOrderHeader.AddressPropertyMetadata));
        
        public static EntityRelation FK_SalesOrderHeader_Address_ShipTo_AddressID = EntityRelation.Register(new EntityRelation("FK_SalesOrderHeader_Address_ShipTo_AddressID",
            typeof(Address), new EntityProperty[] {Address.AddressIDPropertyMetadata}, Multiplicity.ZeroOrOne, Address.SalesOrderHeaders1PropertyMetadata,
            typeof(SalesOrderHeader), new EntityProperty[] {SalesOrderHeader.ShipToAddressIDPropertyMetadata}, Multiplicity.Many, SalesOrderHeader.Address1PropertyMetadata));
        
        public static EntityRelation FK_CustomerAddress_Customer_CustomerID = EntityRelation.Register(new EntityRelation("FK_CustomerAddress_Customer_CustomerID",
            typeof(Customer), new EntityProperty[] {Customer.CustomerIDPropertyMetadata}, Multiplicity.One, Customer.CustomerAddressesPropertyMetadata,
            typeof(CustomerAddress), new EntityProperty[] {CustomerAddress.CustomerIDPropertyMetadata}, Multiplicity.Many, CustomerAddress.CustomerPropertyMetadata));
        
        public static EntityRelation FK_SalesOrderHeader_Customer_CustomerID = EntityRelation.Register(new EntityRelation("FK_SalesOrderHeader_Customer_CustomerID",
            typeof(Customer), new EntityProperty[] {Customer.CustomerIDPropertyMetadata}, Multiplicity.One, Customer.SalesOrderHeadersPropertyMetadata,
            typeof(SalesOrderHeader), new EntityProperty[] {SalesOrderHeader.CustomerIDPropertyMetadata}, Multiplicity.Many, SalesOrderHeader.CustomerPropertyMetadata));
        
        public static EntityRelation FK_Product_ProductCategory_ProductCategoryID = EntityRelation.Register(new EntityRelation("FK_Product_ProductCategory_ProductCategoryID",
            typeof(ProductCategory), new EntityProperty[] {ProductCategory.ProductCategoryIDPropertyMetadata}, Multiplicity.ZeroOrOne, ProductCategory.ProductsPropertyMetadata,
            typeof(Product), new EntityProperty[] {Product.ProductCategoryIDPropertyMetadata}, Multiplicity.Many, Product.ProductCategoryPropertyMetadata));
        
        public static EntityRelation FK_Product_ProductModel_ProductModelID = EntityRelation.Register(new EntityRelation("FK_Product_ProductModel_ProductModelID",
            typeof(ProductModel), new EntityProperty[] {ProductModel.ProductModelIDPropertyMetadata}, Multiplicity.ZeroOrOne, ProductModel.ProductsPropertyMetadata,
            typeof(Product), new EntityProperty[] {Product.ProductModelIDPropertyMetadata}, Multiplicity.Many, Product.ProductModelPropertyMetadata));
        
        public static EntityRelation FK_SalesOrderDetail_Product_ProductID = EntityRelation.Register(new EntityRelation("FK_SalesOrderDetail_Product_ProductID",
            typeof(Product), new EntityProperty[] {Product.ProductIDPropertyMetadata}, Multiplicity.One, Product.SalesOrderDetailsPropertyMetadata,
            typeof(SalesOrderDetail), new EntityProperty[] {SalesOrderDetail.ProductIDPropertyMetadata}, Multiplicity.Many, SalesOrderDetail.ProductPropertyMetadata));
        
        public static EntityRelation FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID = EntityRelation.Register(new EntityRelation("FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID",
            typeof(ProductCategory), new EntityProperty[] {ProductCategory.ProductCategoryIDPropertyMetadata}, Multiplicity.ZeroOrOne, ProductCategory.ProductCategory1PropertyMetadata,
            typeof(ProductCategory), new EntityProperty[] {ProductCategory.ParentProductCategoryIDPropertyMetadata}, Multiplicity.Many, ProductCategory.ProductCategory2PropertyMetadata));
        
        public static EntityRelation FK_ProductModelProductDescription_ProductDescription_ProductDescriptionID = EntityRelation.Register(new EntityRelation("FK_ProductModelProductDescription_ProductDescription_ProductDescriptionID",
            typeof(ProductDescription), new EntityProperty[] {ProductDescription.ProductDescriptionIDPropertyMetadata}, Multiplicity.One, ProductDescription.ProductModelProductDescriptionsPropertyMetadata,
            typeof(ProductModelProductDescription), new EntityProperty[] {ProductModelProductDescription.ProductDescriptionIDPropertyMetadata}, Multiplicity.Many, ProductModelProductDescription.ProductDescriptionPropertyMetadata));
        
        public static EntityRelation FK_ProductModelProductDescription_ProductModel_ProductModelID = EntityRelation.Register(new EntityRelation("FK_ProductModelProductDescription_ProductModel_ProductModelID",
            typeof(ProductModel), new EntityProperty[] {ProductModel.ProductModelIDPropertyMetadata}, Multiplicity.One, ProductModel.ProductModelProductDescriptionsPropertyMetadata,
            typeof(ProductModelProductDescription), new EntityProperty[] {ProductModelProductDescription.ProductModelIDPropertyMetadata}, Multiplicity.Many, ProductModelProductDescription.ProductModelPropertyMetadata));
        
        public static EntityRelation FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID = EntityRelation.Register(new EntityRelation("FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID",
            typeof(SalesOrderHeader), new EntityProperty[] {SalesOrderHeader.SalesOrderIDPropertyMetadata}, Multiplicity.One, SalesOrderHeader.SalesOrderDetailsPropertyMetadata,
            typeof(SalesOrderDetail), new EntityProperty[] {SalesOrderDetail.SalesOrderIDPropertyMetadata}, Multiplicity.Many, SalesOrderDetail.SalesOrderHeaderPropertyMetadata));
        
    }
}





